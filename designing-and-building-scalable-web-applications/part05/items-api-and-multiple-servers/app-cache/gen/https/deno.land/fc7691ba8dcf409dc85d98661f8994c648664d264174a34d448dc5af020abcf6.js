// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
// Copyright Node.js contributors. All rights reserved. MIT License.
import { existsSync } from "./_fs_exists.ts";
import { mkdir, mkdirSync } from "./_fs_mkdir.ts";
import { ERR_INVALID_CALLBACK, ERR_INVALID_OPT_VALUE_ENCODING } from "../internal/errors.ts";
export function mkdtemp(prefix, optionsOrCallback, maybeCallback) {
  const callback = typeof optionsOrCallback == "function" ? optionsOrCallback : maybeCallback;
  if (!callback) throw new ERR_INVALID_CALLBACK(callback);
  const encoding = parseEncoding(optionsOrCallback);
  const path = tempDirPath(prefix);
  mkdir(path, {
    recursive: false,
    mode: 0o700
  }, (err)=>{
    if (err) callback(err);
    else callback(null, decode(path, encoding));
  });
}
// https://nodejs.org/dist/latest-v15.x/docs/api/fs.html#fs_fs_mkdtempsync_prefix_options
export function mkdtempSync(prefix, options) {
  const encoding = parseEncoding(options);
  const path = tempDirPath(prefix);
  mkdirSync(path, {
    recursive: false,
    mode: 0o700
  });
  return decode(path, encoding);
}
function parseEncoding(optionsOrCallback) {
  let encoding;
  if (typeof optionsOrCallback == "function") encoding = undefined;
  else if (optionsOrCallback instanceof Object) {
    encoding = optionsOrCallback?.encoding;
  } else encoding = optionsOrCallback;
  if (encoding) {
    try {
      new TextDecoder(encoding);
    } catch  {
      throw new ERR_INVALID_OPT_VALUE_ENCODING(encoding);
    }
  }
  return encoding;
}
function decode(str, encoding) {
  if (!encoding) return str;
  else {
    const decoder = new TextDecoder(encoding);
    const encoder = new TextEncoder();
    return decoder.decode(encoder.encode(str));
  }
}
const CHARS = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
function randomName() {
  return [
    ...Array(6)
  ].map(()=>CHARS[Math.floor(Math.random() * CHARS.length)]).join("");
}
function tempDirPath(prefix) {
  let path;
  do {
    path = prefix + randomName();
  }while (existsSync(path))
  return path;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjEzMi4wL25vZGUvX2ZzL19mc19ta2R0ZW1wLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG4vLyBDb3B5cmlnaHQgTm9kZS5qcyBjb250cmlidXRvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgZXhpc3RzU3luYyB9IGZyb20gXCIuL19mc19leGlzdHMudHNcIjtcbmltcG9ydCB7IG1rZGlyLCBta2RpclN5bmMgfSBmcm9tIFwiLi9fZnNfbWtkaXIudHNcIjtcbmltcG9ydCB7XG4gIEVSUl9JTlZBTElEX0NBTExCQUNLLFxuICBFUlJfSU5WQUxJRF9PUFRfVkFMVUVfRU5DT0RJTkcsXG59IGZyb20gXCIuLi9pbnRlcm5hbC9lcnJvcnMudHNcIjtcblxuZXhwb3J0IHR5cGUgbWtkdGVtcENhbGxiYWNrID0gKFxuICBlcnI6IEVycm9yIHwgbnVsbCxcbiAgZGlyZWN0b3J5Pzogc3RyaW5nLFxuKSA9PiB2b2lkO1xuXG4vLyBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QtdjE1LngvZG9jcy9hcGkvZnMuaHRtbCNmc19mc19ta2R0ZW1wX3ByZWZpeF9vcHRpb25zX2NhbGxiYWNrXG5leHBvcnQgZnVuY3Rpb24gbWtkdGVtcChwcmVmaXg6IHN0cmluZywgY2FsbGJhY2s6IG1rZHRlbXBDYWxsYmFjayk6IHZvaWQ7XG5leHBvcnQgZnVuY3Rpb24gbWtkdGVtcChcbiAgcHJlZml4OiBzdHJpbmcsXG4gIG9wdGlvbnM6IHsgZW5jb2Rpbmc6IHN0cmluZyB9IHwgc3RyaW5nLFxuICBjYWxsYmFjazogbWtkdGVtcENhbGxiYWNrLFxuKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiBta2R0ZW1wKFxuICBwcmVmaXg6IHN0cmluZyxcbiAgb3B0aW9uc09yQ2FsbGJhY2s6IHsgZW5jb2Rpbmc6IHN0cmluZyB9IHwgc3RyaW5nIHwgbWtkdGVtcENhbGxiYWNrLFxuICBtYXliZUNhbGxiYWNrPzogbWtkdGVtcENhbGxiYWNrLFxuKTogdm9pZCB7XG4gIGNvbnN0IGNhbGxiYWNrOiBta2R0ZW1wQ2FsbGJhY2sgfCB1bmRlZmluZWQgPVxuICAgIHR5cGVvZiBvcHRpb25zT3JDYWxsYmFjayA9PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zT3JDYWxsYmFjayA6IG1heWJlQ2FsbGJhY2s7XG4gIGlmICghY2FsbGJhY2spIHRocm93IG5ldyBFUlJfSU5WQUxJRF9DQUxMQkFDSyhjYWxsYmFjayk7XG5cbiAgY29uc3QgZW5jb2Rpbmc6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHBhcnNlRW5jb2Rpbmcob3B0aW9uc09yQ2FsbGJhY2spO1xuICBjb25zdCBwYXRoID0gdGVtcERpclBhdGgocHJlZml4KTtcblxuICBta2RpcihcbiAgICBwYXRoLFxuICAgIHsgcmVjdXJzaXZlOiBmYWxzZSwgbW9kZTogMG83MDAgfSxcbiAgICAoZXJyOiBFcnJvciB8IG51bGwgfCB1bmRlZmluZWQpID0+IHtcbiAgICAgIGlmIChlcnIpIGNhbGxiYWNrKGVycik7XG4gICAgICBlbHNlIGNhbGxiYWNrKG51bGwsIGRlY29kZShwYXRoLCBlbmNvZGluZykpO1xuICAgIH0sXG4gICk7XG59XG5cbi8vIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC12MTUueC9kb2NzL2FwaS9mcy5odG1sI2ZzX2ZzX21rZHRlbXBzeW5jX3ByZWZpeF9vcHRpb25zXG5leHBvcnQgZnVuY3Rpb24gbWtkdGVtcFN5bmMoXG4gIHByZWZpeDogc3RyaW5nLFxuICBvcHRpb25zPzogeyBlbmNvZGluZzogc3RyaW5nIH0gfCBzdHJpbmcsXG4pOiBzdHJpbmcge1xuICBjb25zdCBlbmNvZGluZzogc3RyaW5nIHwgdW5kZWZpbmVkID0gcGFyc2VFbmNvZGluZyhvcHRpb25zKTtcbiAgY29uc3QgcGF0aCA9IHRlbXBEaXJQYXRoKHByZWZpeCk7XG5cbiAgbWtkaXJTeW5jKHBhdGgsIHsgcmVjdXJzaXZlOiBmYWxzZSwgbW9kZTogMG83MDAgfSk7XG4gIHJldHVybiBkZWNvZGUocGF0aCwgZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUVuY29kaW5nKFxuICBvcHRpb25zT3JDYWxsYmFjaz86IHsgZW5jb2Rpbmc6IHN0cmluZyB9IHwgc3RyaW5nIHwgbWtkdGVtcENhbGxiYWNrLFxuKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgbGV0IGVuY29kaW5nOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2FsbGJhY2sgPT0gXCJmdW5jdGlvblwiKSBlbmNvZGluZyA9IHVuZGVmaW5lZDtcbiAgZWxzZSBpZiAob3B0aW9uc09yQ2FsbGJhY2sgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICBlbmNvZGluZyA9IG9wdGlvbnNPckNhbGxiYWNrPy5lbmNvZGluZztcbiAgfSBlbHNlIGVuY29kaW5nID0gb3B0aW9uc09yQ2FsbGJhY2s7XG5cbiAgaWYgKGVuY29kaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZyk7XG4gICAgfSBjYXRjaCB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfT1BUX1ZBTFVFX0VOQ09ESU5HKGVuY29kaW5nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZW5jb2Rpbmc7XG59XG5cbmZ1bmN0aW9uIGRlY29kZShzdHI6IHN0cmluZywgZW5jb2Rpbmc/OiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoIWVuY29kaW5nKSByZXR1cm4gc3RyO1xuICBlbHNlIHtcbiAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKGVuY29kaW5nKTtcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKGVuY29kZXIuZW5jb2RlKHN0cikpO1xuICB9XG59XG5cbmNvbnN0IENIQVJTID0gXCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiO1xuZnVuY3Rpb24gcmFuZG9tTmFtZSgpOiBzdHJpbmcge1xuICByZXR1cm4gWy4uLkFycmF5KDYpXS5tYXAoKCkgPT5cbiAgICBDSEFSU1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBDSEFSUy5sZW5ndGgpXVxuICApLmpvaW4oXCJcIik7XG59XG5cbmZ1bmN0aW9uIHRlbXBEaXJQYXRoKHByZWZpeDogc3RyaW5nKTogc3RyaW5nIHtcbiAgbGV0IHBhdGg6IHN0cmluZztcbiAgZG8ge1xuICAgIHBhdGggPSBwcmVmaXggKyByYW5kb21OYW1lKCk7XG4gIH0gd2hpbGUgKGV4aXN0c1N5bmMocGF0aCkpO1xuXG4gIHJldHVybiBwYXRoO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUMxRSxvRUFBb0U7QUFDcEUsU0FBUyxVQUFVLFFBQVEsa0JBQWtCO0FBQzdDLFNBQVMsS0FBSyxFQUFFLFNBQVMsUUFBUSxpQkFBaUI7QUFDbEQsU0FDRSxvQkFBb0IsRUFDcEIsOEJBQThCLFFBQ3pCLHdCQUF3QjtBQWMvQixPQUFPLFNBQVMsUUFDZCxNQUFjLEVBQ2QsaUJBQWtFLEVBQ2xFLGFBQStCO0VBRS9CLE1BQU0sV0FDSixPQUFPLHFCQUFxQixhQUFhLG9CQUFvQjtFQUMvRCxJQUFJLENBQUMsVUFBVSxNQUFNLElBQUkscUJBQXFCO0VBRTlDLE1BQU0sV0FBK0IsY0FBYztFQUNuRCxNQUFNLE9BQU8sWUFBWTtFQUV6QixNQUNFLE1BQ0E7SUFBRSxXQUFXO0lBQU8sTUFBTTtFQUFNLEdBQ2hDLENBQUM7SUFDQyxJQUFJLEtBQUssU0FBUztTQUNiLFNBQVMsTUFBTSxPQUFPLE1BQU07RUFDbkM7QUFFSjtBQUVBLHlGQUF5RjtBQUN6RixPQUFPLFNBQVMsWUFDZCxNQUFjLEVBQ2QsT0FBdUM7RUFFdkMsTUFBTSxXQUErQixjQUFjO0VBQ25ELE1BQU0sT0FBTyxZQUFZO0VBRXpCLFVBQVUsTUFBTTtJQUFFLFdBQVc7SUFBTyxNQUFNO0VBQU07RUFDaEQsT0FBTyxPQUFPLE1BQU07QUFDdEI7QUFFQSxTQUFTLGNBQ1AsaUJBQW1FO0VBRW5FLElBQUk7RUFDSixJQUFJLE9BQU8scUJBQXFCLFlBQVksV0FBVztPQUNsRCxJQUFJLDZCQUE2QixRQUFRO0lBQzVDLFdBQVcsbUJBQW1CO0VBQ2hDLE9BQU8sV0FBVztFQUVsQixJQUFJLFVBQVU7SUFDWixJQUFJO01BQ0YsSUFBSSxZQUFZO0lBQ2xCLEVBQUUsT0FBTTtNQUNOLE1BQU0sSUFBSSwrQkFBK0I7SUFDM0M7RUFDRjtFQUVBLE9BQU87QUFDVDtBQUVBLFNBQVMsT0FBTyxHQUFXLEVBQUUsUUFBaUI7RUFDNUMsSUFBSSxDQUFDLFVBQVUsT0FBTztPQUNqQjtJQUNILE1BQU0sVUFBVSxJQUFJLFlBQVk7SUFDaEMsTUFBTSxVQUFVLElBQUk7SUFDcEIsT0FBTyxRQUFRLE1BQU0sQ0FBQyxRQUFRLE1BQU0sQ0FBQztFQUN2QztBQUNGO0FBRUEsTUFBTSxRQUFRO0FBQ2QsU0FBUztFQUNQLE9BQU87T0FBSSxNQUFNO0dBQUcsQ0FBQyxHQUFHLENBQUMsSUFDdkIsS0FBSyxDQUFDLEtBQUssS0FBSyxDQUFDLEtBQUssTUFBTSxLQUFLLE1BQU0sTUFBTSxFQUFFLEVBQy9DLElBQUksQ0FBQztBQUNUO0FBRUEsU0FBUyxZQUFZLE1BQWM7RUFDakMsSUFBSTtFQUNKLEdBQUc7SUFDRCxPQUFPLFNBQVM7RUFDbEIsUUFBUyxXQUFXLE1BQU87RUFFM0IsT0FBTztBQUNUIn0=