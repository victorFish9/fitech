// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
import { fromFileUrl } from "../path.ts";
/**
 * TODO: Also accept 'path' parameter as a Node polyfill Buffer type once these
 * are implemented. See https://github.com/denoland/deno/issues/3403
 */ export function link(existingPath, newPath, callback) {
  existingPath = existingPath instanceof URL ? fromFileUrl(existingPath) : existingPath;
  newPath = newPath instanceof URL ? fromFileUrl(newPath) : newPath;
  Deno.link(existingPath, newPath).then(()=>callback(null), callback);
}
/**
 * TODO: Also accept 'path' parameter as a Node polyfill Buffer type once these
 * are implemented. See https://github.com/denoland/deno/issues/3403
 */ export function linkSync(existingPath, newPath) {
  existingPath = existingPath instanceof URL ? fromFileUrl(existingPath) : existingPath;
  newPath = newPath instanceof URL ? fromFileUrl(newPath) : newPath;
  Deno.linkSync(existingPath, newPath);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjEzMi4wL25vZGUvX2ZzL19mc19saW5rLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjIgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5pbXBvcnQgdHlwZSB7IENhbGxiYWNrV2l0aEVycm9yIH0gZnJvbSBcIi4vX2ZzX2NvbW1vbi50c1wiO1xuaW1wb3J0IHsgZnJvbUZpbGVVcmwgfSBmcm9tIFwiLi4vcGF0aC50c1wiO1xuXG4vKipcbiAqIFRPRE86IEFsc28gYWNjZXB0ICdwYXRoJyBwYXJhbWV0ZXIgYXMgYSBOb2RlIHBvbHlmaWxsIEJ1ZmZlciB0eXBlIG9uY2UgdGhlc2VcbiAqIGFyZSBpbXBsZW1lbnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kZW5vbGFuZC9kZW5vL2lzc3Vlcy8zNDAzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5rKFxuICBleGlzdGluZ1BhdGg6IHN0cmluZyB8IFVSTCxcbiAgbmV3UGF0aDogc3RyaW5nIHwgVVJMLFxuICBjYWxsYmFjazogQ2FsbGJhY2tXaXRoRXJyb3IsXG4pOiB2b2lkIHtcbiAgZXhpc3RpbmdQYXRoID0gZXhpc3RpbmdQYXRoIGluc3RhbmNlb2YgVVJMXG4gICAgPyBmcm9tRmlsZVVybChleGlzdGluZ1BhdGgpXG4gICAgOiBleGlzdGluZ1BhdGg7XG4gIG5ld1BhdGggPSBuZXdQYXRoIGluc3RhbmNlb2YgVVJMID8gZnJvbUZpbGVVcmwobmV3UGF0aCkgOiBuZXdQYXRoO1xuXG4gIERlbm8ubGluayhleGlzdGluZ1BhdGgsIG5ld1BhdGgpLnRoZW4oKCkgPT4gY2FsbGJhY2sobnVsbCksIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBUT0RPOiBBbHNvIGFjY2VwdCAncGF0aCcgcGFyYW1ldGVyIGFzIGEgTm9kZSBwb2x5ZmlsbCBCdWZmZXIgdHlwZSBvbmNlIHRoZXNlXG4gKiBhcmUgaW1wbGVtZW50ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZGVub2xhbmQvZGVuby9pc3N1ZXMvMzQwM1xuICovXG5leHBvcnQgZnVuY3Rpb24gbGlua1N5bmMoXG4gIGV4aXN0aW5nUGF0aDogc3RyaW5nIHwgVVJMLFxuICBuZXdQYXRoOiBzdHJpbmcgfCBVUkwsXG4pOiB2b2lkIHtcbiAgZXhpc3RpbmdQYXRoID0gZXhpc3RpbmdQYXRoIGluc3RhbmNlb2YgVVJMXG4gICAgPyBmcm9tRmlsZVVybChleGlzdGluZ1BhdGgpXG4gICAgOiBleGlzdGluZ1BhdGg7XG4gIG5ld1BhdGggPSBuZXdQYXRoIGluc3RhbmNlb2YgVVJMID8gZnJvbUZpbGVVcmwobmV3UGF0aCkgOiBuZXdQYXRoO1xuXG4gIERlbm8ubGlua1N5bmMoZXhpc3RpbmdQYXRoLCBuZXdQYXRoKTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwRUFBMEU7QUFFMUUsU0FBUyxXQUFXLFFBQVEsYUFBYTtBQUV6Qzs7O0NBR0MsR0FDRCxPQUFPLFNBQVMsS0FDZCxZQUEwQixFQUMxQixPQUFxQixFQUNyQixRQUEyQjtFQUUzQixlQUFlLHdCQUF3QixNQUNuQyxZQUFZLGdCQUNaO0VBQ0osVUFBVSxtQkFBbUIsTUFBTSxZQUFZLFdBQVc7RUFFMUQsS0FBSyxJQUFJLENBQUMsY0FBYyxTQUFTLElBQUksQ0FBQyxJQUFNLFNBQVMsT0FBTztBQUM5RDtBQUVBOzs7Q0FHQyxHQUNELE9BQU8sU0FBUyxTQUNkLFlBQTBCLEVBQzFCLE9BQXFCO0VBRXJCLGVBQWUsd0JBQXdCLE1BQ25DLFlBQVksZ0JBQ1o7RUFDSixVQUFVLG1CQUFtQixNQUFNLFlBQVksV0FBVztFQUUxRCxLQUFLLFFBQVEsQ0FBQyxjQUFjO0FBQzlCIn0=