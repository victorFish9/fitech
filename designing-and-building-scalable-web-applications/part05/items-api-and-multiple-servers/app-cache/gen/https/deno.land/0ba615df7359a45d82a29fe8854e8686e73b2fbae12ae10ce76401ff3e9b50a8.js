// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
//
// Adapted from Node.js. Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// These are simplified versions of the "real" errors in Node.
import { nextTick } from "../_next_tick.ts";
class NodeFalsyValueRejectionError extends Error {
  reason;
  code = "ERR_FALSY_VALUE_REJECTION";
  constructor(reason){
    super("Promise was rejected with falsy value");
    this.reason = reason;
  }
}
class NodeInvalidArgTypeError extends TypeError {
  code = "ERR_INVALID_ARG_TYPE";
  constructor(argumentName){
    super(`The ${argumentName} argument must be of type function.`);
  }
}
function callbackify(original) {
  if (typeof original !== "function") {
    throw new NodeInvalidArgTypeError('"original"');
  }
  const callbackified = function(...args) {
    const maybeCb = args.pop();
    if (typeof maybeCb !== "function") {
      throw new NodeInvalidArgTypeError("last");
    }
    const cb = (...args)=>{
      maybeCb.apply(this, args);
    };
    original.apply(this, args).then((ret)=>{
      nextTick(cb.bind(this, null, ret));
    }, (rej)=>{
      rej = rej || new NodeFalsyValueRejectionError(rej);
      nextTick(cb.bind(this, rej));
    });
  };
  const descriptors = Object.getOwnPropertyDescriptors(original);
  // It is possible to manipulate a functions `length` or `name` property. This
  // guards against the manipulation.
  if (typeof descriptors.length.value === "number") {
    descriptors.length.value++;
  }
  if (typeof descriptors.name.value === "string") {
    descriptors.name.value += "Callbackified";
  }
  Object.defineProperties(callbackified, descriptors);
  return callbackified;
}
export { callbackify };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjEzMi4wL25vZGUvX3V0aWwvX3V0aWxfY2FsbGJhY2tpZnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiB0aGUgRGVubyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cbi8vXG4vLyBBZGFwdGVkIGZyb20gTm9kZS5qcy4gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIFRoZXNlIGFyZSBzaW1wbGlmaWVkIHZlcnNpb25zIG9mIHRoZSBcInJlYWxcIiBlcnJvcnMgaW4gTm9kZS5cblxuaW1wb3J0IHsgbmV4dFRpY2sgfSBmcm9tIFwiLi4vX25leHRfdGljay50c1wiO1xuXG5jbGFzcyBOb2RlRmFsc3lWYWx1ZVJlamVjdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwdWJsaWMgcmVhc29uOiB1bmtub3duO1xuICBwdWJsaWMgY29kZSA9IFwiRVJSX0ZBTFNZX1ZBTFVFX1JFSkVDVElPTlwiO1xuICBjb25zdHJ1Y3RvcihyZWFzb246IHVua25vd24pIHtcbiAgICBzdXBlcihcIlByb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggZmFsc3kgdmFsdWVcIik7XG4gICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gIH1cbn1cbmNsYXNzIE5vZGVJbnZhbGlkQXJnVHlwZUVycm9yIGV4dGVuZHMgVHlwZUVycm9yIHtcbiAgcHVibGljIGNvZGUgPSBcIkVSUl9JTlZBTElEX0FSR19UWVBFXCI7XG4gIGNvbnN0cnVjdG9yKGFyZ3VtZW50TmFtZTogc3RyaW5nKSB7XG4gICAgc3VwZXIoYFRoZSAke2FyZ3VtZW50TmFtZX0gYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIGZ1bmN0aW9uLmApO1xuICB9XG59XG5cbnR5cGUgQ2FsbGJhY2s8UmVzdWx0VD4gPVxuICB8ICgoZXJyOiBFcnJvcikgPT4gdm9pZClcbiAgfCAoKGVycjogbnVsbCwgcmVzdWx0OiBSZXN1bHRUKSA9PiB2b2lkKTtcblxuZnVuY3Rpb24gY2FsbGJhY2tpZnk8UmVzdWx0VD4oXG4gIGZuOiAoKSA9PiBQcm9taXNlTGlrZTxSZXN1bHRUPixcbik6IChjYWxsYmFjazogQ2FsbGJhY2s8UmVzdWx0VD4pID0+IHZvaWQ7XG5mdW5jdGlvbiBjYWxsYmFja2lmeTxBcmdULCBSZXN1bHRUPihcbiAgZm46IChhcmc6IEFyZ1QpID0+IFByb21pc2VMaWtlPFJlc3VsdFQ+LFxuKTogKGFyZzogQXJnVCwgY2FsbGJhY2s6IENhbGxiYWNrPFJlc3VsdFQ+KSA9PiB2b2lkO1xuZnVuY3Rpb24gY2FsbGJhY2tpZnk8QXJnMVQsIEFyZzJULCBSZXN1bHRUPihcbiAgZm46IChhcmcxOiBBcmcxVCwgYXJnMjogQXJnMlQpID0+IFByb21pc2VMaWtlPFJlc3VsdFQ+LFxuKTogKGFyZzE6IEFyZzFULCBhcmcyOiBBcmcyVCwgY2FsbGJhY2s6IENhbGxiYWNrPFJlc3VsdFQ+KSA9PiB2b2lkO1xuZnVuY3Rpb24gY2FsbGJhY2tpZnk8QXJnMVQsIEFyZzJULCBBcmczVCwgUmVzdWx0VD4oXG4gIGZuOiAoYXJnMTogQXJnMVQsIGFyZzI6IEFyZzJULCBhcmczOiBBcmczVCkgPT4gUHJvbWlzZUxpa2U8UmVzdWx0VD4sXG4pOiAoYXJnMTogQXJnMVQsIGFyZzI6IEFyZzJULCBhcmczOiBBcmczVCwgY2FsbGJhY2s6IENhbGxiYWNrPFJlc3VsdFQ+KSA9PiB2b2lkO1xuZnVuY3Rpb24gY2FsbGJhY2tpZnk8QXJnMVQsIEFyZzJULCBBcmczVCwgQXJnNFQsIFJlc3VsdFQ+KFxuICBmbjogKFxuICAgIGFyZzE6IEFyZzFULFxuICAgIGFyZzI6IEFyZzJULFxuICAgIGFyZzM6IEFyZzNULFxuICAgIGFyZzQ6IEFyZzRULFxuICApID0+IFByb21pc2VMaWtlPFJlc3VsdFQ+LFxuKTogKFxuICBhcmcxOiBBcmcxVCxcbiAgYXJnMjogQXJnMlQsXG4gIGFyZzM6IEFyZzNULFxuICBhcmc0OiBBcmc0VCxcbiAgY2FsbGJhY2s6IENhbGxiYWNrPFJlc3VsdFQ+LFxuKSA9PiB2b2lkO1xuZnVuY3Rpb24gY2FsbGJhY2tpZnk8QXJnMVQsIEFyZzJULCBBcmczVCwgQXJnNFQsIEFyZzVULCBSZXN1bHRUPihcbiAgZm46IChcbiAgICBhcmcxOiBBcmcxVCxcbiAgICBhcmcyOiBBcmcyVCxcbiAgICBhcmczOiBBcmczVCxcbiAgICBhcmc0OiBBcmc0VCxcbiAgICBhcmc1OiBBcmc1VCxcbiAgKSA9PiBQcm9taXNlTGlrZTxSZXN1bHRUPixcbik6IChcbiAgYXJnMTogQXJnMVQsXG4gIGFyZzI6IEFyZzJULFxuICBhcmczOiBBcmczVCxcbiAgYXJnNDogQXJnNFQsXG4gIGFyZzU6IEFyZzVULFxuICBjYWxsYmFjazogQ2FsbGJhY2s8UmVzdWx0VD4sXG4pID0+IHZvaWQ7XG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5PFJlc3VsdFQ+KFxuICBvcmlnaW5hbDogKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gUHJvbWlzZUxpa2U8UmVzdWx0VD4sXG4pOiAoLi4uYXJnczogdW5rbm93bltdKSA9PiB2b2lkIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IE5vZGVJbnZhbGlkQXJnVHlwZUVycm9yKCdcIm9yaWdpbmFsXCInKTtcbiAgfVxuXG4gIGNvbnN0IGNhbGxiYWNraWZpZWQgPSBmdW5jdGlvbiAodGhpczogdW5rbm93biwgLi4uYXJnczogdW5rbm93bltdKTogdm9pZCB7XG4gICAgY29uc3QgbWF5YmVDYiA9IGFyZ3MucG9wKCk7XG4gICAgaWYgKHR5cGVvZiBtYXliZUNiICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBOb2RlSW52YWxpZEFyZ1R5cGVFcnJvcihcImxhc3RcIik7XG4gICAgfVxuICAgIGNvbnN0IGNiID0gKC4uLmFyZ3M6IHVua25vd25bXSk6IHZvaWQgPT4ge1xuICAgICAgbWF5YmVDYi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpLnRoZW4oXG4gICAgICAocmV0OiB1bmtub3duKSA9PiB7XG4gICAgICAgIG5leHRUaWNrKGNiLmJpbmQodGhpcywgbnVsbCwgcmV0KSk7XG4gICAgICB9LFxuICAgICAgKHJlajogdW5rbm93bikgPT4ge1xuICAgICAgICByZWogPSByZWogfHwgbmV3IE5vZGVGYWxzeVZhbHVlUmVqZWN0aW9uRXJyb3IocmVqKTtcbiAgICAgICAgbmV4dFRpY2soY2IuYmluZCh0aGlzLCByZWopKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9yaWdpbmFsKTtcbiAgLy8gSXQgaXMgcG9zc2libGUgdG8gbWFuaXB1bGF0ZSBhIGZ1bmN0aW9ucyBgbGVuZ3RoYCBvciBgbmFtZWAgcHJvcGVydHkuIFRoaXNcbiAgLy8gZ3VhcmRzIGFnYWluc3QgdGhlIG1hbmlwdWxhdGlvbi5cbiAgaWYgKHR5cGVvZiBkZXNjcmlwdG9ycy5sZW5ndGgudmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICBkZXNjcmlwdG9ycy5sZW5ndGgudmFsdWUrKztcbiAgfVxuICBpZiAodHlwZW9mIGRlc2NyaXB0b3JzLm5hbWUudmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICBkZXNjcmlwdG9ycy5uYW1lLnZhbHVlICs9IFwiQ2FsbGJhY2tpZmllZFwiO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNhbGxiYWNraWZpZWQsIGRlc2NyaXB0b3JzKTtcbiAgcmV0dXJuIGNhbGxiYWNraWZpZWQ7XG59XG5cbmV4cG9ydCB7IGNhbGxiYWNraWZ5IH07XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEVBQTBFO0FBQzFFLEVBQUU7QUFDRiw0RUFBNEU7QUFDNUUsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSxnRUFBZ0U7QUFDaEUsc0VBQXNFO0FBQ3RFLHNFQUFzRTtBQUN0RSw0RUFBNEU7QUFDNUUscUVBQXFFO0FBQ3JFLHdCQUF3QjtBQUN4QixFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLHlEQUF5RDtBQUN6RCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLDZEQUE2RDtBQUM3RCw0RUFBNEU7QUFDNUUsMkVBQTJFO0FBQzNFLHdFQUF3RTtBQUN4RSw0RUFBNEU7QUFDNUUseUNBQXlDO0FBRXpDLDhEQUE4RDtBQUU5RCxTQUFTLFFBQVEsUUFBUSxtQkFBbUI7QUFFNUMsTUFBTSxxQ0FBcUM7RUFDbEMsT0FBZ0I7RUFDaEIsT0FBTyw0QkFBNEI7RUFDMUMsWUFBWSxNQUFlLENBQUU7SUFDM0IsS0FBSyxDQUFDO0lBQ04sSUFBSSxDQUFDLE1BQU0sR0FBRztFQUNoQjtBQUNGO0FBQ0EsTUFBTSxnQ0FBZ0M7RUFDN0IsT0FBTyx1QkFBdUI7RUFDckMsWUFBWSxZQUFvQixDQUFFO0lBQ2hDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxhQUFhLG1DQUFtQyxDQUFDO0VBQ2hFO0FBQ0Y7QUFpREEsU0FBUyxZQUNQLFFBQXNEO0VBRXRELElBQUksT0FBTyxhQUFhLFlBQVk7SUFDbEMsTUFBTSxJQUFJLHdCQUF3QjtFQUNwQztFQUVBLE1BQU0sZ0JBQWdCLFNBQXlCLEdBQUcsSUFBZTtJQUMvRCxNQUFNLFVBQVUsS0FBSyxHQUFHO0lBQ3hCLElBQUksT0FBTyxZQUFZLFlBQVk7TUFDakMsTUFBTSxJQUFJLHdCQUF3QjtJQUNwQztJQUNBLE1BQU0sS0FBSyxDQUFDLEdBQUc7TUFDYixRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUU7SUFDdEI7SUFDQSxTQUFTLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxJQUFJLENBQzdCLENBQUM7TUFDQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNO0lBQy9CLEdBQ0EsQ0FBQztNQUNDLE1BQU0sT0FBTyxJQUFJLDZCQUE2QjtNQUM5QyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRTtJQUN6QjtFQUVKO0VBRUEsTUFBTSxjQUFjLE9BQU8seUJBQXlCLENBQUM7RUFDckQsNkVBQTZFO0VBQzdFLG1DQUFtQztFQUNuQyxJQUFJLE9BQU8sWUFBWSxNQUFNLENBQUMsS0FBSyxLQUFLLFVBQVU7SUFDaEQsWUFBWSxNQUFNLENBQUMsS0FBSztFQUMxQjtFQUNBLElBQUksT0FBTyxZQUFZLElBQUksQ0FBQyxLQUFLLEtBQUssVUFBVTtJQUM5QyxZQUFZLElBQUksQ0FBQyxLQUFLLElBQUk7RUFDNUI7RUFDQSxPQUFPLGdCQUFnQixDQUFDLGVBQWU7RUFDdkMsT0FBTztBQUNUO0FBRUEsU0FBUyxXQUFXLEdBQUcifQ==