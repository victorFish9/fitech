// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
import { getEncoding } from "./_fs_common.ts";
import { Buffer } from "../buffer.ts";
import { fromFileUrl } from "../path.ts";
function maybeDecode(data, encoding) {
  const buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
  if (encoding && encoding !== "binary") return buffer.toString(encoding);
  return buffer;
}
export function readFile(path, optOrCallback, callback) {
  path = path instanceof URL ? fromFileUrl(path) : path;
  let cb;
  if (typeof optOrCallback === "function") {
    cb = optOrCallback;
  } else {
    cb = callback;
  }
  const encoding = getEncoding(optOrCallback);
  const p = Deno.readFile(path);
  if (cb) {
    p.then((data)=>{
      if (encoding && encoding !== "binary") {
        const text = maybeDecode(data, encoding);
        return cb(null, text);
      }
      const buffer = maybeDecode(data, encoding);
      cb(null, buffer);
    }, (err)=>cb && cb(err));
  }
}
export function readFileSync(path, opt) {
  path = path instanceof URL ? fromFileUrl(path) : path;
  const data = Deno.readFileSync(path);
  const encoding = getEncoding(opt);
  if (encoding && encoding !== "binary") {
    const text = maybeDecode(data, encoding);
    return text;
  }
  const buffer = maybeDecode(data, encoding);
  return buffer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjEzMi4wL25vZGUvX2ZzL19mc19yZWFkRmlsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIyIHRoZSBEZW5vIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHtcbiAgQmluYXJ5T3B0aW9uc0FyZ3VtZW50LFxuICBGaWxlT3B0aW9uc0FyZ3VtZW50LFxuICBnZXRFbmNvZGluZyxcbiAgVGV4dE9wdGlvbnNBcmd1bWVudCxcbn0gZnJvbSBcIi4vX2ZzX2NvbW1vbi50c1wiO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcIi4uL2J1ZmZlci50c1wiO1xuaW1wb3J0IHsgZnJvbUZpbGVVcmwgfSBmcm9tIFwiLi4vcGF0aC50c1wiO1xuaW1wb3J0IHsgQmluYXJ5RW5jb2RpbmdzLCBFbmNvZGluZ3MsIFRleHRFbmNvZGluZ3MgfSBmcm9tIFwiLi4vX3V0aWxzLnRzXCI7XG5cbmZ1bmN0aW9uIG1heWJlRGVjb2RlKGRhdGE6IFVpbnQ4QXJyYXksIGVuY29kaW5nOiBUZXh0RW5jb2RpbmdzKTogc3RyaW5nO1xuZnVuY3Rpb24gbWF5YmVEZWNvZGUoXG4gIGRhdGE6IFVpbnQ4QXJyYXksXG4gIGVuY29kaW5nOiBCaW5hcnlFbmNvZGluZ3MgfCBudWxsLFxuKTogQnVmZmVyO1xuZnVuY3Rpb24gbWF5YmVEZWNvZGUoXG4gIGRhdGE6IFVpbnQ4QXJyYXksXG4gIGVuY29kaW5nOiBFbmNvZGluZ3MgfCBudWxsLFxuKTogc3RyaW5nIHwgQnVmZmVyIHtcbiAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgaWYgKGVuY29kaW5nICYmIGVuY29kaW5nICE9PSBcImJpbmFyeVwiKSByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cblxudHlwZSBUZXh0Q2FsbGJhY2sgPSAoZXJyOiBFcnJvciB8IG51bGwsIGRhdGE/OiBzdHJpbmcpID0+IHZvaWQ7XG50eXBlIEJpbmFyeUNhbGxiYWNrID0gKGVycjogRXJyb3IgfCBudWxsLCBkYXRhPzogQnVmZmVyKSA9PiB2b2lkO1xudHlwZSBHZW5lcmljQ2FsbGJhY2sgPSAoZXJyOiBFcnJvciB8IG51bGwsIGRhdGE/OiBzdHJpbmcgfCBCdWZmZXIpID0+IHZvaWQ7XG50eXBlIENhbGxiYWNrID0gVGV4dENhbGxiYWNrIHwgQmluYXJ5Q2FsbGJhY2sgfCBHZW5lcmljQ2FsbGJhY2s7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkRmlsZShcbiAgcGF0aDogc3RyaW5nIHwgVVJMLFxuICBvcHRpb25zOiBUZXh0T3B0aW9uc0FyZ3VtZW50LFxuICBjYWxsYmFjazogVGV4dENhbGxiYWNrLFxuKTogdm9pZDtcbmV4cG9ydCBmdW5jdGlvbiByZWFkRmlsZShcbiAgcGF0aDogc3RyaW5nIHwgVVJMLFxuICBvcHRpb25zOiBCaW5hcnlPcHRpb25zQXJndW1lbnQsXG4gIGNhbGxiYWNrOiBCaW5hcnlDYWxsYmFjayxcbik6IHZvaWQ7XG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGUoXG4gIHBhdGg6IHN0cmluZyB8IFVSTCxcbiAgb3B0aW9uczogbnVsbCB8IHVuZGVmaW5lZCB8IEZpbGVPcHRpb25zQXJndW1lbnQsXG4gIGNhbGxiYWNrOiBCaW5hcnlDYWxsYmFjayxcbik6IHZvaWQ7XG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGUocGF0aDogc3RyaW5nIHwgVVJMLCBjYWxsYmFjazogQmluYXJ5Q2FsbGJhY2spOiB2b2lkO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlKFxuICBwYXRoOiBzdHJpbmcgfCBVUkwsXG4gIG9wdE9yQ2FsbGJhY2s/OiBGaWxlT3B0aW9uc0FyZ3VtZW50IHwgQ2FsbGJhY2sgfCBudWxsIHwgdW5kZWZpbmVkLFxuICBjYWxsYmFjaz86IENhbGxiYWNrLFxuKTogdm9pZCB7XG4gIHBhdGggPSBwYXRoIGluc3RhbmNlb2YgVVJMID8gZnJvbUZpbGVVcmwocGF0aCkgOiBwYXRoO1xuICBsZXQgY2I6IENhbGxiYWNrIHwgdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIG9wdE9yQ2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNiID0gb3B0T3JDYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICBjYiA9IGNhbGxiYWNrO1xuICB9XG5cbiAgY29uc3QgZW5jb2RpbmcgPSBnZXRFbmNvZGluZyhvcHRPckNhbGxiYWNrKTtcblxuICBjb25zdCBwID0gRGVuby5yZWFkRmlsZShwYXRoKTtcblxuICBpZiAoY2IpIHtcbiAgICBwLnRoZW4oKGRhdGE6IFVpbnQ4QXJyYXkpID0+IHtcbiAgICAgIGlmIChlbmNvZGluZyAmJiBlbmNvZGluZyAhPT0gXCJiaW5hcnlcIikge1xuICAgICAgICBjb25zdCB0ZXh0ID0gbWF5YmVEZWNvZGUoZGF0YSwgZW5jb2RpbmcpO1xuICAgICAgICByZXR1cm4gKGNiIGFzIFRleHRDYWxsYmFjaykobnVsbCwgdGV4dCk7XG4gICAgICB9XG4gICAgICBjb25zdCBidWZmZXIgPSBtYXliZURlY29kZShkYXRhLCBlbmNvZGluZyk7XG4gICAgICAoY2IgYXMgQmluYXJ5Q2FsbGJhY2spKG51bGwsIGJ1ZmZlcik7XG4gICAgfSwgKGVycikgPT4gY2IgJiYgY2IoZXJyKSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlU3luYyhcbiAgcGF0aDogc3RyaW5nIHwgVVJMLFxuICBvcHQ6IFRleHRPcHRpb25zQXJndW1lbnQsXG4pOiBzdHJpbmc7XG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGVTeW5jKFxuICBwYXRoOiBzdHJpbmcgfCBVUkwsXG4gIG9wdD86IEJpbmFyeU9wdGlvbnNBcmd1bWVudCxcbik6IEJ1ZmZlcjtcbmV4cG9ydCBmdW5jdGlvbiByZWFkRmlsZVN5bmMoXG4gIHBhdGg6IHN0cmluZyB8IFVSTCxcbiAgb3B0PzogRmlsZU9wdGlvbnNBcmd1bWVudCxcbik6IHN0cmluZyB8IEJ1ZmZlciB7XG4gIHBhdGggPSBwYXRoIGluc3RhbmNlb2YgVVJMID8gZnJvbUZpbGVVcmwocGF0aCkgOiBwYXRoO1xuICBjb25zdCBkYXRhID0gRGVuby5yZWFkRmlsZVN5bmMocGF0aCk7XG4gIGNvbnN0IGVuY29kaW5nID0gZ2V0RW5jb2Rpbmcob3B0KTtcbiAgaWYgKGVuY29kaW5nICYmIGVuY29kaW5nICE9PSBcImJpbmFyeVwiKSB7XG4gICAgY29uc3QgdGV4dCA9IG1heWJlRGVjb2RlKGRhdGEsIGVuY29kaW5nKTtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuICBjb25zdCBidWZmZXIgPSBtYXliZURlY29kZShkYXRhLCBlbmNvZGluZyk7XG4gIHJldHVybiBidWZmZXI7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEVBQTBFO0FBQzFFLFNBR0UsV0FBVyxRQUVOLGtCQUFrQjtBQUN6QixTQUFTLE1BQU0sUUFBUSxlQUFlO0FBQ3RDLFNBQVMsV0FBVyxRQUFRLGFBQWE7QUFRekMsU0FBUyxZQUNQLElBQWdCLEVBQ2hCLFFBQTBCO0VBRTFCLE1BQU0sU0FBUyxPQUFPLElBQUksQ0FBQyxLQUFLLE1BQU0sRUFBRSxLQUFLLFVBQVUsRUFBRSxLQUFLLFVBQVU7RUFDeEUsSUFBSSxZQUFZLGFBQWEsVUFBVSxPQUFPLE9BQU8sUUFBUSxDQUFDO0VBQzlELE9BQU87QUFDVDtBQXVCQSxPQUFPLFNBQVMsU0FDZCxJQUFrQixFQUNsQixhQUFpRSxFQUNqRSxRQUFtQjtFQUVuQixPQUFPLGdCQUFnQixNQUFNLFlBQVksUUFBUTtFQUNqRCxJQUFJO0VBQ0osSUFBSSxPQUFPLGtCQUFrQixZQUFZO0lBQ3ZDLEtBQUs7RUFDUCxPQUFPO0lBQ0wsS0FBSztFQUNQO0VBRUEsTUFBTSxXQUFXLFlBQVk7RUFFN0IsTUFBTSxJQUFJLEtBQUssUUFBUSxDQUFDO0VBRXhCLElBQUksSUFBSTtJQUNOLEVBQUUsSUFBSSxDQUFDLENBQUM7TUFDTixJQUFJLFlBQVksYUFBYSxVQUFVO1FBQ3JDLE1BQU0sT0FBTyxZQUFZLE1BQU07UUFDL0IsT0FBTyxBQUFDLEdBQW9CLE1BQU07TUFDcEM7TUFDQSxNQUFNLFNBQVMsWUFBWSxNQUFNO01BQ2hDLEdBQXNCLE1BQU07SUFDL0IsR0FBRyxDQUFDLE1BQVEsTUFBTSxHQUFHO0VBQ3ZCO0FBQ0Y7QUFVQSxPQUFPLFNBQVMsYUFDZCxJQUFrQixFQUNsQixHQUF5QjtFQUV6QixPQUFPLGdCQUFnQixNQUFNLFlBQVksUUFBUTtFQUNqRCxNQUFNLE9BQU8sS0FBSyxZQUFZLENBQUM7RUFDL0IsTUFBTSxXQUFXLFlBQVk7RUFDN0IsSUFBSSxZQUFZLGFBQWEsVUFBVTtJQUNyQyxNQUFNLE9BQU8sWUFBWSxNQUFNO0lBQy9CLE9BQU87RUFDVDtFQUNBLE1BQU0sU0FBUyxZQUFZLE1BQU07RUFDakMsT0FBTztBQUNUIn0=